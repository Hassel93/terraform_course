trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - azure-pipelines.yml


parameters:
  - name: Environment
    type: string
    default: test
    values:
      - "test"
      - "int"
      - "prod"
  - name: TerraformVersion
    type: string
    default: "1.6.4"
  - name: TerraformArguments
    type: string
    default: " "

variables:
  - name: ServiceConnectionName
    value: sub-app-${{ parameters.Environment}}
  - name: TFStorageAccount
    value: stappfstate${{ parameters.Environment}}
  - name: TFStorageRG
    value: rg-app-terraform-${{ parameters.Environment}}
  - name: TFContainerName
    value: state
  - name: TFContainerKey
    value: terraform.tfstate

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: TerraformBuild
        timeoutInMinutes: 0
        pool:
          name: Default
        cancelTimeoutInMinutes: 2
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: ${{ variables.ServiceConnectionName }}
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                ressourceGroupExist=$(az group exists --name ${{ variables.TFStorageRG }});

                if [ "$ressourceGroupExist" == 'false' ]; then
                  az group create --name ${{ variables.TFStorageRG }} --location "switzerlandnorth";
                else
                  echo "RG exists!"
                fi
                
                if az storage account show --name ${{ variables.TFStorageAccount }} --resource-group ${{ variables.TFStorageRG }} --query "name"; then
                  containerExist=$(az storage container exists --account-name ${{ variables.TFStorageAccount }} --name ${{ variables.TFContainerName }} --query "exists" --auth-mode login);
                else
                  storageAccountNotExist='true'
                  containerExist='false'; 
                fi

                if [ "$storageAccountNotExist" == 'true' ]; then
                  az storage account create --name ${{ variables.TFStorageAccount }} --resource-group ${{ variables.TFStorageRG }} --kind StorageV2 --location "switzerlandnorth" --sku Standard_LRS
                else
                  echo "ST exists!"
                fi

                if [ "$containerExist" == 'false' ]; then
                  az storage container create --name ${{ variables.TFContainerName }} --account-name ${{ variables.TFStorageAccount }}
                else
                  echo "Container exists!"
                fi

          - task: TerraformInstaller@0
            displayName: "Terraform: Install"
            inputs:
              terraformVersion: ${{ parameters.TerraformVersion }}
              
          - task: TerraformTaskV4@4
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: init
              workingDirectory: terraform
              backendServiceArm: "${{ variables.ServiceConnectionName }}"
              backendAzureRmResourceGroupName: "${{ variables.TFStorageRG }}"
              backendAzureRmStorageAccountName: "${{ variables.TFStorageAccount }}"
              backendAzureRmContainerName: "${{ variables.TFContainerName }}"
              backendAzureRmKey: "${{ variables.TFContainerKey }}"

          - task: TerraformTaskV4@4
            displayName: "Terraform Plan"
            inputs:
              command: plan
              provider: 'azurerm'
              workingDirectory: terraform
              commandOptions: '-var="env=${{ parameters.Environment }}" -out=$(Build.ArtifactStagingDirectory)/plan.out ${{ parameters.TerraformArguments }}'
              environmentServiceNameAzureRM: ${{ variables.ServiceConnectionName }}

          - publish: "$(Build.ArtifactStagingDirectory)/plan.out"
            displayName: "Publish Artifact: Terraform Plan"
            artifact: "plan"
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - stage: Deploy
    displayName: Deploy
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - deployment: AzureDeploy
        environment: "infrastructure-${{ parameters.Environment }}-deploy"
        timeoutInMinutes: 0
        pool:
          name: ${{ parameters.Poolname}}
        cancelTimeoutInMinutes: 2
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - download: current
                  artifact: "plan"
                  displayName: "Download Terraform Plan"

                - task: TerraformInstaller@0
                  displayName: "Terraform: Install"
                  inputs:
                    terraformVersion: ${{ parameters.TerraformVersion }}

                - task: TerraformTaskV4@4
                  displayName: "Terraform: Init"
                  inputs:
                    provider: "azurerm"
                    command: init
                    commandOptions: "-upgrade"
                    workingDirectory: terraform
                    backendServiceArm: "${{ variables.ServiceConnectionName }}"
                    backendAzureRmResourceGroupName: "${{ variables.TFStorageRG }}"
                    backendAzureRmStorageAccountName: "${{ variables.TFStorageAccount }}"
                    backendAzureRmContainerName: "${{ variables.TFContainerName }}"
                    backendAzureRmKey: "${{ variables.TFContainerKey }}"

                - task: TerraformTaskV4@4
                  displayName: "Terraform : azurerm validate and apply"
                  inputs:
                    command: apply
                    provider: 'azurerm'
                    workingDirectory: terraform
                    commandOptions: " -auto-approve $(Agent.BuildDirectory)/plan/plan.out"
                    environmentServiceNameAzureRM: ${{ variables.ServiceConnectionName }}
